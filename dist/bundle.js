(()=>{"use strict";var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};function n(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function i(t,n,e){if(e||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){i.push([t,n,e,r])>1||s(t,n)}))})}function s(t,n){try{(e=o[t](n)).value instanceof u?Promise.resolve(e.value.v).then(a,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function a(t){s("next",t)}function l(t){s("throw",t)}function f(t,n){t(n),i.shift(),i.length&&s(i[0][0],i[0][1])}}Object.create,Object.create;var s=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function a(t){return"function"==typeof t}function l(t){return a(null==t?void 0:t.then)}function f(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var h=f((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function p(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var d=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,n,e,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=r(s),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(n){t={error:n}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else s.remove(this);var p=this.initialTeardown;if(a(p))try{p()}catch(t){c=t instanceof h?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=r(d),y=v.next();!y.done;y=v.next()){var m=y.value;try{b(m)}catch(t){c=null!=c?c:[],t instanceof h?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(u=v.return)&&u.call(v)}finally{if(e)throw e.error}}}if(c)throw new h(c)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)b(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&p(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&p(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}(),v=d.EMPTY;function y(t){return t instanceof d||t&&"closed"in t&&a(t.remove)&&a(t.add)&&a(t.unsubscribe)}function b(t){a(t)?t():t.unsubscribe()}var m=null,w=null,g=void 0,x=!1,_=!1,S={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var u=S.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([t,n],o(e))):setTimeout.apply(void 0,i([t,n],o(e)))},clearTimeout:function(t){var n=S.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function E(t){S.setTimeout((function(){if(!m)throw t;m(t)}))}function I(){}var T=O("C",void 0,void 0);function O(t,n,e){return{kind:t,value:n,error:e}}var A=null;function C(t){if(x){var n=!A;if(n&&(A={errorThrown:!1,error:null}),t(),n){var e=A,r=e.errorThrown,o=e.error;if(A=null,r)throw o}}else t()}var k=function(t){function e(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,y(n)&&n.add(e)):e.destination=z,e}return n(e,t),e.create=function(t,n,e){return new q(t,n,e)},e.prototype.next=function(t){this.isStopped?U(function(t){return O("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?U(O("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?U(T,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(d),P=Function.prototype.bind;function j(t,n){return P.call(t,n)}var L=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){R(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){R(t)}else R(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){R(t)}},t}(),q=function(t){function e(n,e,r){var o,i,u=t.call(this)||this;return a(n)||!n?o={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&_?((i=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&j(n.next,i),error:n.error&&j(n.error,i),complete:n.complete&&j(n.complete,i)}):o=n,u.destination=new L(o),u}return n(e,t),e}(k);function R(t){var n;x?(n=t,x&&A&&(A.errorThrown=!0,A.error=n)):E(t)}function U(t,n){var e=w;e&&S.setTimeout((function(){return e(t,n)}))}var z={closed:!0,next:I,error:function(t){throw t},complete:I},F="function"==typeof Symbol&&Symbol.observable||"@@observable";function M(t){return t}function G(t){return 0===t.length?M:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var Y=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=this,i=(r=t)&&r instanceof k||function(t){return t&&a(t.next)&&a(t.error)&&a(t.complete)}(r)&&y(r)?t:new q(t,n,e);return C((function(){var t=o,n=t.operator,e=t.source;i.add(n?n.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=N(n))((function(n,r){var o=new q({next:function(n){try{t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n});e.subscribe(o)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[F]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return G(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=N(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function N(t){var n;return null!==(n=null!=t?t:g)&&void 0!==n?n:Promise}function H(t){return a(t[F])}function V(t){return Symbol.asyncIterator&&a(null==t?void 0:t[Symbol.asyncIterator])}function B(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var D="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function J(t){return a(null==t?void 0:t[D])}function K(t){return c(this,arguments,(function(){var n,r,o;return e(this,(function(e){switch(e.label){case 0:n=t.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,u(n.read())];case 3:return r=e.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,u(o)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function Q(t){return a(null==t?void 0:t.getReader)}function W(t){if(t instanceof Y)return t;if(null!=t){if(H(t))return i=t,new Y((function(t){var n=i[F]();if(a(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(s(t))return o=t,new Y((function(t){for(var n=0;n<o.length&&!t.closed;n++)t.next(o[n]);t.complete()}));if(l(t))return e=t,new Y((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,E)}));if(V(t))return X(t);if(J(t))return n=t,new Y((function(t){var e,o;try{for(var i=r(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}t.complete()}));if(Q(t))return X(K(t))}var n,e,o,i;throw B(t)}function X(t){return new Y((function(n){(function(t,n){var o,i,u,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=r(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,o,(n=t[e](n)).done,n.value)}))}}}(t),e.label=1;case 1:return[4,o.next()];case 2:if((i=e.sent()).done)return[3,4];if(s=i.value,n.next(s),n.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=e.sent(),u={error:a},[3,11];case 6:return e.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{o(f.next(t))}catch(t){n(t)}}function r(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,r)}o((f=f.apply(s,a||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function Z(t){return function(n){if(function(t){return a(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function $(t,n,e,r,o){return new tt(t,n,e,r,o)}var tt=function(t){function e(n,e,r,o,i,u){var c=t.call(this,n)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return n(e,t),e.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},e}(k);function nt(t,n){return Z((function(e,r){var o=0;e.subscribe($(r,(function(e){r.next(t.call(n,e,o++))})))}))}function et(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=n.schedule((function(){e(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function rt(t,n,e){return void 0===e&&(e=1/0),a(n)?rt((function(e,r){return nt((function(t,o){return n(e,t,r,o)}))(W(t(e,r)))}),e):("number"==typeof n&&(e=n),Z((function(n,r){return function(t,n,e,r,o,i,u,c){var s=[],a=0,l=0,f=!1,h=function(){!f||s.length||a||n.complete()},p=function(t){return a<r?d(t):s.push(t)},d=function(t){a++;var o=!1;W(e(t,l++)).subscribe($(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)t=void 0,t=s.shift(),d(t);h()}catch(t){n.error(t)}var t})))};return t.subscribe($(n,p,(function(){f=!0,h()}))),function(){}}(n,r,t,e)})))}var ot=Array.isArray;var it=["addListener","removeListener"],ut=["addEventListener","removeEventListener"],ct=["on","off"];function st(t,n,e,r){if(a(e)&&(r=e,e=void 0),r)return st(t,n,e).pipe((u=r,nt((function(t){return function(t,n){return ot(n)?t.apply(void 0,i([],o(n))):t(n)}(u,t)}))));var u,c=o(function(t){return a(t.addEventListener)&&a(t.removeEventListener)}(t)?ut.map((function(r){return function(o){return t[r](n,o,e)}})):function(t){return a(t.addListener)&&a(t.removeListener)}(t)?it.map(at(t,n)):function(t){return a(t.on)&&a(t.off)}(t)?ct.map(at(t,n)):[],2),l=c[0],f=c[1];if(!l&&s(t))return rt((function(t){return st(t,n,e)}))(W(t));if(!l)throw new TypeError("Invalid event target");return new Y((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return l(n),function(){return f(n)}}))}function at(t,n){return function(e){return function(r){return t[e](n,r)}}}var lt=function(t){function e(n,e){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},e}(d),ft={setInterval:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var u=ft.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([t,n],o(e))):setInterval.apply(void 0,i([t,n],o(e)))},clearInterval:function(t){var n=ft.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},ht=function(t){function e(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},e.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),ft.setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;ft.clearInterval(n)},e.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(lt),pt={now:function(){return(pt.delegate||Date).now()},delegate:void 0},dt=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=pt.now,t}(),vt=new(function(t){function e(n,e){void 0===e&&(e=dt.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return n(e,t),e.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},e}(dt))(ht),yt=vt;function bt(t,n){return Z((function(e,r){var o=0;e.subscribe($(r,(function(e){return t.call(n,e,o++)&&r.next(e)})))}))}function mt(t,n){return Z((function(e,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};e.subscribe($(r,(function(e){null==o||o.unsubscribe();var u=0,s=i++;W(t(e,s)).subscribe(o=$(r,(function(t){return r.next(n?n(e,t,s,u++):t)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}function wt(t,n){return void 0===n&&(n=0),Z((function(e,r){e.subscribe($(r,(function(e){return et(r,t,(function(){return r.next(e)}),n)}),(function(){return et(r,t,(function(){return r.complete()}),n)}),(function(e){return et(r,t,(function(){return r.error(e)}),n)})))}))}function gt(t,n){return void 0===n&&(n=0),Z((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function xt(t,n){if(!t)throw new Error("Iterable cannot be null");return new Y((function(e){et(e,n,(function(){var r=t[Symbol.asyncIterator]();et(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function _t(t,n){return n?function(t,n){if(null!=t){if(H(t))return function(t,n){return W(t).pipe(gt(n),wt(n))}(t,n);if(s(t))return function(t,n){return new Y((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(l(t))return function(t,n){return W(t).pipe(gt(n),wt(n))}(t,n);if(V(t))return xt(t,n);if(J(t))return function(t,n){return new Y((function(e){var r;return et(e,n,(function(){r=t[D](),et(e,n,(function(){var t,n,o;try{n=(t=r.next()).value,o=t.done}catch(t){return void e.error(t)}o?e.complete():e.next(n)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(Q(t))return function(t,n){return xt(K(t),n)}(t,n)}throw B(t)}(t,n):W(t)}function St(t){return t&&a(t.schedule)}var Et=new Y((function(t){return t.complete()}));function It(t){return void 0===t&&(t=1/0),rt(M,t)}function Tt(t){return t[t.length-1]}function Ot(t){return St(Tt(t))?t.pop():void 0}function At(t,n){return"number"==typeof Tt(t)?t.pop():n}function Ct(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Ot(t),r=At(t,1/0),o=t;return o.length?1===o.length?W(o[0]):It(r)(_t(o,e)):Et}var kt=f((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Pt=function(t){function e(){var n=t.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return n(e,t),e.prototype.lift=function(t){var n=new jt(this,this);return n.operator=t,n},e.prototype._throwIfClosed=function(){if(this.closed)throw new kt},e.prototype.next=function(t){var n=this;C((function(){var e,o;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var i=r(n.currentObservers),u=i.next();!u.done;u=i.next())u.value.next(t)}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}}}))},e.prototype.error=function(t){var n=this;C((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var e=n.observers;e.length;)e.shift().error(t)}}))},e.prototype.complete=function(){var t=this;C((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(n){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,n)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var n=this,e=this,r=e.hasError,o=e.isStopped,i=e.observers;return r||o?v:(this.currentObservers=null,i.push(t),new d((function(){n.currentObservers=null,p(i,t)})))},e.prototype._checkFinalizedStatuses=function(t){var n=this,e=n.hasError,r=n.thrownError,o=n.isStopped;e?t.error(r):o&&t.complete()},e.prototype.asObservable=function(){var t=new Y;return t.source=this,t},e.create=function(t,n){return new jt(t,n)},e}(Y),jt=function(t){function e(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return n(e,t),e.prototype.next=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===e||e.call(n,t)},e.prototype.error=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===e||e.call(n,t)},e.prototype.complete=function(){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===n||n.call(t)},e.prototype._subscribe=function(t){var n,e;return null!==(e=null===(n=this.source)||void 0===n?void 0:n.subscribe(t))&&void 0!==e?e:v},e}(Pt),Lt=function(t){function e(n){var e=t.call(this)||this;return e._value=n,e}return n(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return!e.closed&&n.next(this._value),e},e.prototype.getValue=function(){var t=this,n=t.hasError,e=t.thrownError,r=t._value;if(n)throw e;return this._throwIfClosed(),r},e.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},e}(Pt),qt=function(){function t(t){this._player=t,this._affectedCountries=[]}return Object.defineProperty(t.prototype,"player",{get:function(){return this._player},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"affectedCountries",{get:function(){return this._affectedCountries},enumerable:!1,configurable:!0}),t.prototype.addAffectedCountry=function(t){t&&this._affectedCountries.push(t)},t}(),Rt="http://localhost:3000",Ut="".concat(Rt,"/countries"),zt=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{s(r.next(t))}catch(t){i(t)}}function c(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}s((r=r.apply(t,n||[])).next())}))},Ft=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},Mt="".concat(Rt,"/players");function Gt(t){var n=t.method,e=t.payload;return{method:n,headers:{"Content-type":"application/json"},body:JSON.stringify(e)}}function Yt(t){return zt(this,void 0,void 0,(function(){var n,e;return Ft(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),n="".concat(Mt,"?username=").concat(t),[4,fetch(n)];case 1:return[4,r.sent().json()];case 2:return(e=r.sent()).length?[2,e[0]]:[2,null];case 3:return r.sent(),[2,null];case 4:return[2]}}))}))}function Nt(t){return zt(this,void 0,void 0,(function(){return Ft(this,(function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),[4,fetch("".concat(Mt),Gt({method:"POST",payload:{username:t,highScore:0}}))];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()];case 3:return n.sent(),[2,null];case 4:return[2]}}))}))}function Ht(){return zt(this,void 0,void 0,(function(){var t;return Ft(this,(function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),t="".concat(Mt,"?_sort=highScore,timeRemaining&_order=desc,asc&_limit=10"),[4,fetch(t)];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()];case 3:return n.sent(),[2,null];case 4:return[2]}}))}))}var Vt="timerTick",Bt="allCountries";function Dt(t,n){return st(t,"input").pipe((100,void 0===e&&(e=vt),Z((function(t,n){var r=null,o=null,i=null,u=function(){if(r){r.unsubscribe(),r=null;var t=o;o=null,n.next(t)}};function c(){var t=i+100,o=e.now();if(o<t)return r=this.schedule(void 0,t-o),void n.add(r);u()}t.subscribe($(n,(function(t){o=t,i=e.now(),r||(r=e.schedule(c,100),n.add(r))}),(function(){u(),n.complete()}),void 0,(function(){o=r=null})))}))),nt((function(t){return t.target.value})),bt((function(t){return t.length>=4})),bt((function(t){return!n.affectedCountries.map((function(t){return t.name})).filter((function(n){return n===t.toLowerCase()})).length})),mt((function(t){return function(t){return _t(function(t){return n=this,e=void 0,o=function(){var n,e;return function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),n="".concat(Ut,"?name=").concat(t),[4,fetch(n)];case 1:return[2,r.sent().json()];case 2:return e=r.sent(),console.log(e),[2,null];case 3:return[2]}}))},new((r=void 0)||(r=Promise))((function(t,i){function u(t){try{s(o.next(t))}catch(t){i(t)}}function c(t){try{s(o.throw(t))}catch(t){i(t)}}function s(n){var e;n.done?t(n.value):(e=n.value,e instanceof r?e:new r((function(t){t(e)}))).then(u,c)}s((o=o.apply(n,e||[])).next())}));var n,e,r,o}(t.toLowerCase()))}(t)})),nt((function(t){return t[0]})));var e}function Jt(){return function(t,n,e){void 0===t&&(t=0),void 0===e&&(e=yt);var r=-1;return null!=n&&(St(n)?e=n:r=n),new Y((function(n){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-e.now():t;i<0&&(i=0);var u=0;return e.schedule((function(){n.closed||(n.next(u++),0<=r?this.schedule(void 0,r):n.complete())}),i)}))}(0,1e3).pipe(nt((function(t){return 300-t})),301<=0?function(){return Et}:Z((function(t,n){var e=0;t.subscribe($(n,(function(t){++e<=301&&(n.next(t),301<=e&&n.complete())})))})))}function Kt(t){return st(t,"click")}function Qt(t){return Ct.apply(void 0,t)}function Wt(t,n){return t.subscribe(n)}function Xt(t){var n=t.username,e=t.body,r=t.giveUpButton,o=t.countryInput,i=t.timerElement,u=300,c=new qt({username:n,highScore:0,timeRemaining:u}),s=Kt(r),a=st(document,Vt),l=st(document,Bt),f=Jt(),h=Dt(o,c),p=new Lt(c.affectedCountries.length),d=Wt(f,(function(t){u=300-t,function(t,n){n.innerText=bn(t)}(t,i),t||document.dispatchEvent(new Event(Vt))}));Wt(h,(function(t){!function(t){var n=t.country,e=t.svgImage,r=t.countryInput;if(n){var o=Array.from(e.children).filter((function(t){return t.getAttribute(tn)===n.name}));o.length&&(mn(o,nn),r.value="")}}({svgImage:sn(),country:t,countryInput:o}),c.addAffectedCountry(t),p.next(c.affectedCountries.length)})),Wt(p.pipe(),(function(t){41===t&&document.dispatchEvent(new Event(Bt))})),Wt(Qt([s,a,l]).pipe(mt((function(){return _t(function(t){var n=t.username,e=t.score,r=t.timeRemaining;return zt(this,void 0,void 0,(function(){var t,o;return Ft(this,(function(i){switch(i.label){case 0:return i.trys.push([0,5,,6]),[4,Yt(n)];case 1:return(o=i.sent())?[3,3]:[4,Nt(n)];case 2:o=i.sent(),i.label=3;case 3:return(t=o).highScore>e||t.highScore===e&&t.timeRemaining<r?[2,!1]:[4,fetch("".concat(Mt,"/").concat(t.id),Gt({method:"PUT",payload:{username:n,highScore:e,timeRemaining:r}}))];case 4:return i.sent(),[2,!0];case 5:return i.sent(),[2,!1];case 6:return[2]}}))}))}({username:c.player.username,score:c.affectedCountries.length,timeRemaining:u}))}))),(function(){!function(t,n,e){Zt(this,void 0,void 0,(function(){var r;return $t(this,(function(o){switch(o.label){case 0:return t.removeChild(document.querySelector(wn(on))),cn(t),(r=document.createElement("h3")).classList.add(rn),r.innerText="Your score: ".concat(n," countries\n                           For: ").concat(bn(e)),ln(document.querySelector("#".concat("app")),[r]),[4,dn()];case 1:return o.sent(),[2]}}))}))}(e,c.affectedCountries.length,u),d.unsubscribe()}))}var Zt=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{s(r.next(t))}catch(t){i(t)}}function c(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}s((r=r.apply(t,n||[])).next())}))},$t=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},tn="name",nn="lightgreen",en="input-container",rn="score-info",on="game",un="high-scores";function cn(t){var n,e=pn(),r=fn({placeholderText:"username"}),o=hn({text:"START"});n=function(){r.value?function(t,n){!function(t){var n;n=sn(),mn(Array.from(n.children),"#ececec"),t.removeChild(document.querySelector(wn(en)));var e=document.querySelector(wn(rn));e&&t.removeChild(e)}(t);var e=document.createElement("div");e.classList.add(on);var r=pn(),o=fn({placeholderText:"country"}),i=hn({text:"GIVE UP"});an(r,[o,i]);var u=function(){var t=document.createElement("p");return t.classList.add("timer"),t}();an(e,[u,r]),ln(t,[e]),Xt({username:n,body:t,giveUpButton:i,countryInput:o,timerElement:u})}(t,r.value):alert("Username is required!")},Wt(Kt(o),n),an(e,[r,o]),ln(t,[e])}function sn(){return document.querySelector("svg")}function an(t,n){n.forEach((function(n){t.appendChild(n)}))}function ln(t,n){n.forEach((function(n){t.prepend(n)}))}function fn(t){var n=t.placeholderText,e=document.createElement("input");return n&&(e.placeholder=n),e.type="text",e}function hn(t){var n=t.text,e=document.createElement("button");return e.innerText=n,e}function pn(){var t=document.createElement("div");return t.classList.add(en),t}function dn(){return Zt(this,void 0,void 0,(function(){var t;return $t(this,(function(n){switch(n.label){case 0:return document.querySelector(wn(un))?(t=document.querySelector(wn(un))).innerHTML="":((t=document.createElement("div")).classList.add(un),an(document.querySelector(wn("map")),[t])),t.innerHTML+="<h2>Top 10 scores</h2>",[4,vn(t)];case 1:return n.sent(),[2]}}))}))}function vn(t){return Zt(this,void 0,void 0,(function(){return $t(this,(function(n){switch(n.label){case 0:return[4,Ht()];case 1:return n.sent().forEach((function(n,e){t.innerHTML+="<h3>".concat(e+1,". ").concat(n.username,": ").concat(n.highScore," countries for ").concat(bn(n.timeRemaining),"</h3>")})),[2]}}))}))}function yn(t){return t<10?"0".concat(t):t}function bn(t){return"".concat(yn(Math.floor(t/60)),":").concat(yn(t%60))}function mn(t,n){t.forEach((function(t){t.setAttribute("fill",n)}))}function wn(t){return".".concat(t)}cn(document.querySelector("div"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,