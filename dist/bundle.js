(()=>{"use strict";var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};function n(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function i(t,n,e){if(e||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){i.push([t,n,e,r])>1||s(t,n)}))})}function s(t,n){try{(e=o[t](n)).value instanceof u?Promise.resolve(e.value.v).then(a,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function a(t){s("next",t)}function l(t){s("throw",t)}function f(t,n){t(n),i.shift(),i.length&&s(i[0][0],i[0][1])}}function s(t){return"function"==typeof t}function a(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}Object.create,Object.create;var l=a((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function f(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var h=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,n,e,u,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var f=r(a),h=f.next();!h.done;h=f.next())h.value.remove(this)}catch(n){t={error:n}}finally{try{h&&!h.done&&(n=f.return)&&n.call(f)}finally{if(t)throw t.error}}else a.remove(this);var p=this.initialTeardown;if(s(p))try{p()}catch(t){c=t instanceof l?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var y=r(d),b=y.next();!b.done;b=y.next()){var m=b.value;try{v(m)}catch(t){c=null!=c?c:[],t instanceof l?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){e={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(e)throw e.error}}}if(c)throw new l(c)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)v(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&f(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&f(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}(),p=h.EMPTY;function d(t){return t instanceof h||t&&"closed"in t&&s(t.remove)&&s(t.add)&&s(t.unsubscribe)}function v(t){s(t)?t():t.unsubscribe()}var y=null,b=null,m=void 0,w=!1,g=!1,x={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var u=x.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([t,n],o(e))):setTimeout.apply(void 0,i([t,n],o(e)))},clearTimeout:function(t){var n=x.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function _(t){x.setTimeout((function(){if(!y)throw t;y(t)}))}function S(){}var E=T("C",void 0,void 0);function T(t,n,e){return{kind:t,value:n,error:e}}var I=null;function O(t){if(w){var n=!I;if(n&&(I={errorThrown:!1,error:null}),t(),n){var e=I,r=e.errorThrown,o=e.error;if(I=null,r)throw o}}else t()}var C=function(t){function e(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,d(n)&&n.add(e)):e.destination=z,e}return n(e,t),e.create=function(t,n,e){return new j(t,n,e)},e.prototype.next=function(t){this.isStopped?q(function(t){return T("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?q(T("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?q(E,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(h),A=Function.prototype.bind;function k(t,n){return A.call(t,n)}var P=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){L(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){L(t)}else L(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){L(t)}},t}(),j=function(t){function e(n,e,r){var o,i,u=t.call(this)||this;return s(n)||!n?o={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&g?((i=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&k(n.next,i),error:n.error&&k(n.error,i),complete:n.complete&&k(n.complete,i)}):o=n,u.destination=new P(o),u}return n(e,t),e}(C);function L(t){var n;w?(n=t,w&&I&&(I.errorThrown=!0,I.error=n)):_(t)}function q(t,n){var e=b;e&&x.setTimeout((function(){return e(t,n)}))}var z={closed:!0,next:S,error:function(t){throw t},complete:S},R="function"==typeof Symbol&&Symbol.observable||"@@observable";function U(t){return t}function F(t){return 0===t.length?U:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var M=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=this,i=(r=t)&&r instanceof C||function(t){return t&&s(t.next)&&s(t.error)&&s(t.complete)}(r)&&d(r)?t:new j(t,n,e);return O((function(){var t=o,n=t.operator,e=t.source;i.add(n?n.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=G(n))((function(n,r){var o=new j({next:function(n){try{t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n});e.subscribe(o)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[R]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return F(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=G(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function G(t){var n;return null!==(n=null!=t?t:m)&&void 0!==n?n:Promise}var N=a((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Y=function(t){function e(){var n=t.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return n(e,t),e.prototype.lift=function(t){var n=new H(this,this);return n.operator=t,n},e.prototype._throwIfClosed=function(){if(this.closed)throw new N},e.prototype.next=function(t){var n=this;O((function(){var e,o;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var i=r(n.currentObservers),u=i.next();!u.done;u=i.next())u.value.next(t)}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}}}))},e.prototype.error=function(t){var n=this;O((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var e=n.observers;e.length;)e.shift().error(t)}}))},e.prototype.complete=function(){var t=this;O((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(n){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,n)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var n=this,e=this,r=e.hasError,o=e.isStopped,i=e.observers;return r||o?p:(this.currentObservers=null,i.push(t),new h((function(){n.currentObservers=null,f(i,t)})))},e.prototype._checkFinalizedStatuses=function(t){var n=this,e=n.hasError,r=n.thrownError,o=n.isStopped;e?t.error(r):o&&t.complete()},e.prototype.asObservable=function(){var t=new M;return t.source=this,t},e.create=function(t,n){return new H(t,n)},e}(M),H=function(t){function e(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return n(e,t),e.prototype.next=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===e||e.call(n,t)},e.prototype.error=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===e||e.call(n,t)},e.prototype.complete=function(){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===n||n.call(t)},e.prototype._subscribe=function(t){var n,e;return null!==(e=null===(n=this.source)||void 0===n?void 0:n.subscribe(t))&&void 0!==e?e:p},e}(Y),V=function(t){function e(n){var e=t.call(this)||this;return e._value=n,e}return n(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return!e.closed&&n.next(this._value),e},e.prototype.getValue=function(){var t=this,n=t.hasError,e=t.thrownError,r=t._value;if(n)throw e;return this._throwIfClosed(),r},e.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},e}(Y),D=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function J(t){return s(null==t?void 0:t.then)}function B(t){return s(t[R])}function K(t){return Symbol.asyncIterator&&s(null==t?void 0:t[Symbol.asyncIterator])}function Q(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var W="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function X(t){return s(null==t?void 0:t[W])}function Z(t){return c(this,arguments,(function(){var n,r,o;return e(this,(function(e){switch(e.label){case 0:n=t.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,u(n.read())];case 3:return r=e.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,u(o)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function $(t){return s(null==t?void 0:t.getReader)}function tt(t){if(t instanceof M)return t;if(null!=t){if(B(t))return i=t,new M((function(t){var n=i[R]();if(s(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(D(t))return o=t,new M((function(t){for(var n=0;n<o.length&&!t.closed;n++)t.next(o[n]);t.complete()}));if(J(t))return e=t,new M((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,_)}));if(K(t))return nt(t);if(X(t))return n=t,new M((function(t){var e,o;try{for(var i=r(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}t.complete()}));if($(t))return nt(Z(t))}var n,e,o,i;throw Q(t)}function nt(t){return new M((function(n){(function(t,n){var o,i,u,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=r(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,o,(n=t[e](n)).done,n.value)}))}}}(t),e.label=1;case 1:return[4,o.next()];case 2:if((i=e.sent()).done)return[3,4];if(s=i.value,n.next(s),n.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=e.sent(),u={error:a},[3,11];case 6:return e.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{o(f.next(t))}catch(t){n(t)}}function r(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,r)}o((f=f.apply(s,a||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function et(t){return function(n){if(function(t){return s(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function rt(t,n,e,r,o){return new ot(t,n,e,r,o)}var ot=function(t){function e(n,e,r,o,i,u){var c=t.call(this,n)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return n(e,t),e.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},e}(C);function it(t,n){return et((function(e,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};e.subscribe(rt(r,(function(e){null==o||o.unsubscribe();var u=0,s=i++;tt(t(e,s)).subscribe(o=rt(r,(function(t){return r.next(n?n(e,t,s,u++):t)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}function ut(t,n){return et((function(e,r){var o=0;e.subscribe(rt(r,(function(e){r.next(t.call(n,e,o++))})))}))}function ct(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=n.schedule((function(){e(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function st(t,n,e){return void 0===e&&(e=1/0),s(n)?st((function(e,r){return ut((function(t,o){return n(e,t,r,o)}))(tt(t(e,r)))}),e):("number"==typeof n&&(e=n),et((function(n,r){return function(t,n,e,r,o,i,u,c){var s=[],a=0,l=0,f=!1,h=function(){!f||s.length||a||n.complete()},p=function(t){return a<r?d(t):s.push(t)},d=function(t){a++;var o=!1;tt(e(t,l++)).subscribe(rt(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)t=void 0,t=s.shift(),d(t);h()}catch(t){n.error(t)}var t})))};return t.subscribe(rt(n,p,(function(){f=!0,h()}))),function(){}}(n,r,t,e)})))}var at=Array.isArray;var lt=["addListener","removeListener"],ft=["addEventListener","removeEventListener"],ht=["on","off"];function pt(t,n,e,r){if(s(e)&&(r=e,e=void 0),r)return pt(t,n,e).pipe((u=r,ut((function(t){return function(t,n){return at(n)?t.apply(void 0,i([],o(n))):t(n)}(u,t)}))));var u,c=o(function(t){return s(t.addEventListener)&&s(t.removeEventListener)}(t)?ft.map((function(r){return function(o){return t[r](n,o,e)}})):function(t){return s(t.addListener)&&s(t.removeListener)}(t)?lt.map(dt(t,n)):function(t){return s(t.on)&&s(t.off)}(t)?ht.map(dt(t,n)):[],2),a=c[0],l=c[1];if(!a&&D(t))return st((function(t){return pt(t,n,e)}))(tt(t));if(!a)throw new TypeError("Invalid event target");return new M((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return a(n),function(){return l(n)}}))}function dt(t,n){return function(e){return function(r){return t[e](n,r)}}}var vt=function(t){function e(n,e){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},e}(h),yt={setInterval:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var u=yt.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([t,n],o(e))):setInterval.apply(void 0,i([t,n],o(e)))},clearInterval:function(t){var n=yt.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},bt=function(t){function e(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},e.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),yt.setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;yt.clearInterval(n)},e.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(vt),mt={now:function(){return(mt.delegate||Date).now()},delegate:void 0},wt=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=mt.now,t}(),gt=new(function(t){function e(n,e){void 0===e&&(e=wt.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return n(e,t),e.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},e}(wt))(bt),xt=gt;function _t(t,n){return et((function(e,r){var o=0;e.subscribe(rt(r,(function(e){return t.call(n,e,o++)&&r.next(e)})))}))}function St(t,n){return void 0===n&&(n=0),et((function(e,r){e.subscribe(rt(r,(function(e){return ct(r,t,(function(){return r.next(e)}),n)}),(function(){return ct(r,t,(function(){return r.complete()}),n)}),(function(e){return ct(r,t,(function(){return r.error(e)}),n)})))}))}function Et(t,n){return void 0===n&&(n=0),et((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function Tt(t,n){if(!t)throw new Error("Iterable cannot be null");return new M((function(e){ct(e,n,(function(){var r=t[Symbol.asyncIterator]();ct(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function It(t,n){return n?function(t,n){if(null!=t){if(B(t))return function(t,n){return tt(t).pipe(Et(n),St(n))}(t,n);if(D(t))return function(t,n){return new M((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(J(t))return function(t,n){return tt(t).pipe(Et(n),St(n))}(t,n);if(K(t))return Tt(t,n);if(X(t))return function(t,n){return new M((function(e){var r;return ct(e,n,(function(){r=t[W](),ct(e,n,(function(){var t,n,o;try{n=(t=r.next()).value,o=t.done}catch(t){return void e.error(t)}o?e.complete():e.next(n)}),0,!0)})),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(t,n);if($(t))return function(t,n){return Tt(Z(t),n)}(t,n)}throw Q(t)}(t,n):tt(t)}function Ot(t){return t&&s(t.schedule)}var Ct=new M((function(t){return t.complete()}));function At(t){return void 0===t&&(t=1/0),st(U,t)}function kt(t){return t[t.length-1]}function Pt(t){return Ot(kt(t))?t.pop():void 0}function jt(t,n){return"number"==typeof kt(t)?t.pop():n}function Lt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Pt(t),r=jt(t,1/0),o=t;return o.length?1===o.length?tt(o[0]):At(r)(It(o,e)):Ct}var qt="http://localhost:3000",zt="".concat(qt,"/countries"),Rt=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{s(r.next(t))}catch(t){i(t)}}function c(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}s((r=r.apply(t,n||[])).next())}))},Ut=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},Ft="".concat(qt,"/players");function Mt(t){return Rt(this,void 0,void 0,(function(){var n;return Ut(this,(function(e){switch(e.label){case 0:return e.trys.push([0,3,,4]),[4,fetch("".concat(Ft,"?username=").concat(t))];case 1:return[4,e.sent().json()];case 2:return(n=e.sent()).length?[2,n[0]]:[2,null];case 3:return e.sent(),[2,null];case 4:return[2]}}))}))}function Gt(t){return Rt(this,void 0,void 0,(function(){var n;return Ut(this,(function(e){switch(e.label){case 0:return e.trys.push([0,3,,4]),[4,fetch("".concat(Ft),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:t,highScore:0})})];case 1:return[4,e.sent().json()];case 2:return[2,e.sent()];case 3:return n=e.sent(),console.log(n),[2,null];case 4:return[2]}}))}))}function Nt(){return Rt(this,void 0,void 0,(function(){return Ut(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,,4]),[4,fetch("".concat(Ft,"?_sort=highScore,timeRemaining&_order=desc,asc&_limit=10"))];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()];case 3:return t.sent(),[2,null];case 4:return[2]}}))}))}function Yt(t,n){return pt(t,"input").pipe((100,void 0===e&&(e=gt),et((function(t,n){var r=null,o=null,i=null,u=function(){if(r){r.unsubscribe(),r=null;var t=o;o=null,n.next(t)}};function c(){var t=i+100,o=e.now();if(o<t)return r=this.schedule(void 0,t-o),void n.add(r);u()}t.subscribe(rt(n,(function(t){o=t,i=e.now(),r||(r=e.schedule(c,100),n.add(r))}),(function(){u(),n.complete()}),void 0,(function(){o=r=null})))}))),ut((function(t){return t.target.value})),_t((function(t){return t.length>=4})),_t((function(t){return!n.affectedCountries.map((function(t){return t.name})).filter((function(n){return n===t.toLowerCase()})).length})),it((function(t){return function(t){return It(function(t){return n=this,e=void 0,o=function(){var n;return function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,fetch("".concat(zt,"?name=").concat(t))];case 1:return[2,e.sent().json()];case 2:return n=e.sent(),console.log(n),[2,null];case 3:return[2]}}))},new((r=void 0)||(r=Promise))((function(t,i){function u(t){try{s(o.next(t))}catch(t){i(t)}}function c(t){try{s(o.throw(t))}catch(t){i(t)}}function s(n){var e;n.done?t(n.value):(e=n.value,e instanceof r?e:new r((function(t){t(e)}))).then(u,c)}s((o=o.apply(n,e||[])).next())}));var n,e,r,o}(t.toLowerCase()))}(t)})),ut((function(t){return t[0]})));var e}function Ht(){return function(t,n,e){void 0===t&&(t=0),void 0===e&&(e=xt);var r=-1;return null!=n&&(Ot(n)?e=n:r=n),new M((function(n){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-e.now():t;i<0&&(i=0);var u=0;return e.schedule((function(){n.closed||(n.next(u++),0<=r?this.schedule(void 0,r):n.complete())}),i)}))}(0,1e3).pipe(ut((function(t){return 300-t})),301<=0?function(){return Ct}:et((function(t,n){var e=0;t.subscribe(rt(n,(function(t){++e<=301&&(n.next(t),301<=e&&n.complete())})))})))}function Vt(t){return pt(t,"click")}function Dt(t){return Lt.apply(void 0,t)}function Jt(t,n){return t.subscribe(n)}var Bt=function(){function t(t){this._player=t,this._affectedCountries=[]}return Object.defineProperty(t.prototype,"player",{get:function(){return this._player},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"affectedCountries",{get:function(){return this._affectedCountries},enumerable:!1,configurable:!0}),t.prototype.addAffectedCountry=function(t){t&&this._affectedCountries.push(t)},t}(),Kt=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{s(r.next(t))}catch(t){i(t)}}function c(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}s((r=r.apply(t,n||[])).next())}))},Qt=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};function Wt(){return document.querySelector("svg")}function Xt(t,n){n.forEach((function(n){t.appendChild(n)}))}function Zt(t,n){n.forEach((function(n){t.prepend(n)}))}function $t(t){var n=document.createElement("input");return t&&(n.placeholder=t),n.type="text",n}function tn(t){var n=document.createElement("button");return n.innerText=t,n}function nn(){return Kt(this,void 0,void 0,(function(){var t;return Qt(this,(function(n){switch(n.label){case 0:return document.querySelector(".high-scores")?(t=document.querySelector(".high-scores")).innerHTML="":((t=document.createElement("div")).classList.add("high-scores"),Xt(document.querySelector(".map"),[t])),t.innerHTML+="<h2>Top 10 scores</h2>",[4,en(t)];case 1:return n.sent(),[2]}}))}))}function en(t){return Kt(this,void 0,void 0,(function(){return Qt(this,(function(n){switch(n.label){case 0:return[4,Nt()];case 1:return n.sent().forEach((function(n,e){t.innerHTML+="<h3>".concat(e+1,". ").concat(n.username,": ").concat(n.highScore," countries for ").concat(on(n.timeRemaining),"</h3>")})),[2]}}))}))}function rn(t){return t<10?"0".concat(t):t}function on(t){return"".concat(rn(Math.floor(t/60)),":").concat(rn(t%60))}function un(t,n){t.forEach((function(t){t.setAttribute("fill",n)}))}!function t(n){var e=document.createElement("div");e.classList.add("input-container"),e.id="start";var r,o=$t("username"),i=tn("START");r=function(){return function(n,e){var r;r=Wt(),un(Array.from(r.children),"#ececec"),n.removeChild(document.querySelector("#start")),document.querySelector(".score-info")&&n.removeChild(document.querySelector(".score-info"));var o=document.createElement("div");o.classList.add("game"),o.id="game";var i=300,u=new Bt({username:e,highScore:0,timeRemaining:i}),c=document.createElement("div");c.classList.add("input-container");var s=$t("country"),a=tn("GIVE UP");Xt(c,[s,a]);var l=function(){var t=document.createElement("p");return t.classList.add("timer"),t}(),f=Vt(a),h=pt(document,"timerTick"),p=pt(document,"allCountries"),d=Jt(Ht(),(function(t){i=300-t,function(t,n){n.innerText=on(t),t||document.dispatchEvent(new Event("timerTick"))}(t,l)}));Jt(Yt(s,u),(function(t){!function(t,n,e){if(n){var r=Array.from(t.children).filter((function(t){return t.getAttribute("name")===n.name}));r.length&&(un(r,"lightgreen"),e.value="")}}(Wt(),t,s),u.addAffectedCountry(t),v.next(u.affectedCountries.length)}));var v=new V(u.affectedCountries.length);Jt(v.pipe(),(function(t){41===t&&document.dispatchEvent(new Event("allCountries"))})),Jt(Dt([f,h,p]).pipe(it((function(){return It(function(t){return Rt(this,void 0,void 0,(function(){var n,e,r,o,i,u;return Ut(this,(function(c){switch(c.label){case 0:return c.trys.push([0,5,,6]),n=t.username,e=t.score,r=t.timeRemaining,[4,Mt(n)];case 1:return(i=c.sent())?[3,3]:[4,Gt(n)];case 2:i=c.sent(),c.label=3;case 3:return(o=i).highScore>e?[2,!1]:[4,fetch("".concat(Ft,"/").concat(o.id),{method:"PUT",headers:{"Content-type":"application/json"},body:JSON.stringify({username:n,highScore:e,timeRemaining:r})})];case 4:return c.sent(),[2,!0];case 5:return u=c.sent(),console.log(u),[2,!1];case 6:return[2]}}))}))}({username:u.player.username,score:u.affectedCountries.length,timeRemaining:i}))}))),(function(){return function(n,e,r,o){return Kt(this,void 0,void 0,(function(){var i;return Qt(this,(function(u){switch(u.label){case 0:return n.removeChild(document.querySelector("#game")),t(n),(i=document.createElement("h3")).classList.add("score-info"),i.innerText="Your score: ".concat(e," countries\n                           For: ").concat(on(r)),o.unsubscribe(),Zt(document.querySelector("#app"),[i]),[4,nn()];case 1:return u.sent(),[2]}}))}))}(n,u.affectedCountries.length,i,d)})),Xt(o,[l,c]),Zt(n,[o])}(n,o.value)},Jt(Vt(i),r),Xt(e,[o,i]),Zt(n,[e])}(document.querySelector("div"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,